{
	"openapi": "3.0.0",
	"info": {
		"title": "UserAuthAPI",
		"description": "User Authentication API",
		"version": "1.0.0",
		"contact": {
			"name": "Bruno B. Silva",
			"url": "https://github.com/Bruno-Brandao-Silva",
			"email": "brunowbrandao@gmail.com"
		}
	},
	"servers": [
		{
			"url": "https://localhost:3000/api",
			"description": "Local server"
		}
	],
	"tags": [
		{
			"name": "User",
			"description": "User management"
		},
		{
			"name": "Auth",
			"description": "Authentication"
		}
	],
	"paths": {
		"/user/register": {
			"post": {
				"summary": "Create a new user",
				"tags": [
					"Auth"
				],
				"requestBody": {
					"description": "User object",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserRegister"
							},
							"example": {
								"name": "User name",
								"email": "test@email.com",
								"password": "password#123"
							}
						}
					}
				},
				"security": [],
				"responses": {
					"201": {
						"description": "User created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								},
								"example": {
									"message": "Usu치rio registrado com sucesso",
									"id": "64b44e0f4560eb1b07d378d7"
								}
							}
						}
					},
					"400": {
						"description": "Invalid request body"
					},
					"409": {
						"description": "User already exists"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/user/login": {
			"post": {
				"summary": "Authenticate a user and returns the authentication cookie",
				"tags": [
					"Auth"
				],
				"requestBody": {
					"description": "A JSON object containing the e-mail and password.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserLogin"
							},
							"example": {
								"email": "test@email.com",
								"password": "password#123"
							}
						}
					}
				},
				"security": [],
				"responses": {
					"200": {
						"description": "User authenticated successfully",
						"content": {
							"application/json": {
								"example": {
									"message": "Usu치rio autenticado com sucesso"
								}
							}
						},
						"headers": {
							"Set-Cookie": {
								"description": "Authentication cookie",
								"schema": {
									"type": "string",
									"format": "cookie",
									"example": "token=abcdefghijkTOKEN; Path=/; HttpOnly; Secure"
								}
							}
						}
					},
					"400": {
						"description": "Invalid request body"
					},
					"401": {
						"description": "Invalid credentials"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/user/{id}": {
			"get": {
				"summary": "Get user by id",
				"tags": [
					"User"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User id",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Id"
						}
					}
				],
				"security": [
					{
						"cookieAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "User found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserLogin"
								},
								"example": {
									"name": "User name",
									"email": "test@email.com"
								}
							}
						}
					}
				}
			},
			"put": {
				"summary": "Update user by id",
				"tags": [
					"User"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User id",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Id"
						}
					}
				],
				"requestBody": {
					"description": "User object",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserRegister"
							},
							"example": {
								"name": "User name",
								"email": "test@email.com",
								"password": "password#123"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "User updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Message"
								},
								"example": {
									"message": "Usu치rio atualizado com sucesso"
								}
							}
						}
					}
				}
			},
			"delete": {
				"summary": "Delete user by id",
				"tags": [
					"User"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User id",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Id"
						}
					}
				],
				"responses": {
					"200": {
						"description": "User deleted successfully",
						"content": {
							"application/json": {
								"example": {
									"message": "Usu치rio deletado com sucesso"
								}
							}
						}
					}
				}
			}
		}
	},
	"security": [
		{
			"cookieAuth": []
		}
	],
	"components": {
		"securitySchemes": {
			"cookieAuth": {
				"type": "apiKey",
				"in": "cookie",
				"name": "token"
			}
		},
		"schemas": {
			"User": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string",
						"format": "email"
					},
					"password": {
						"type": "string"
					},
					"_id": {
						"type": "string",
						"format": "24 hex",
						"pattern": "^[0-9a-fA-F]{24}$",
						"maxLength": 24
					}
				}
			},
			"UserRegister": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"maxLength": 250
					},
					"email": {
						"type": "string",
						"format": "email"
					},
					"password": {
						"type": "string"
					}
				}
			},
			"UserLogin": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"format": "email",
						"pattern": "^\\S+@\\S+$",
						"maxLength": 150
					},
					"password": {
						"type": "string",
						"maxLength": 32
					}
				}
			},
			"Message": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string"
					}
				}
			},
			"Id": {
				"type": "string",
				"format": "24 hex",
				"pattern": "^[0-9a-fA-F]{24}$",
				"maxLength": 24
			}
		}
	}
}